<!DOCTYPE html>
<head>
<meta charset=utf-8>
<style>
body {
	font-family: Arial,"Helvetica Neue",Helvetica,sans-serif;
	background: #000;
	color: #88D;
}
form {
	background: #123;
	display: block;
	margin: 0 0.5% 0 0.5%;
}
table.cfg {
	width: 100%;
}
table.cfg td:nth-of-type(1) {
	width: 120px;
}
table.cfg td:nth-of-type(2) {
	width: 200px;
}
input[type="text"] {
	width: 98%;
}
input[type="password"] {
	width: 98%;
}
input:-moz-read-only {
	background-color: #123;
	border-color: #567;
	color: #88D;
}
input:read-only {
	background-color: 123;
	border-color: #567;
	color: #88D;
}
</style>

<title>Configure</title>
<script language="javascript">

function combo(lst, ed) {
	ed = ge(ed);
	var idx = lst.selectedIndex;
	if(idx > 0) ed.value = aps[idx].toString();
}
function comboEdit(ed, lst) {
	var value = ed.value;
	lst = ge(lst);
	var idx = lst.selectedIndex;
	if(value == aps[idx].toString()) return;
	for(i = 0; i < aps.length; i++) {
		if(aps[i].toString() == value) {
			lst.selectedIndex = i;
			return;
		}
	}
	lst.selectedIndex = 0;
}
function updateStatus(sta, ap) {
	staStat = sta;
	apStat = ap;
	ge("staStat").value = staStat;
	ge("apStat").value = apStat;
}
function validateAp(f, pwd1) {
	var p1 = f["pwd"].value;
	var p2 = ge(pwd1).value;
	if (p1 != p2) {
		alert("Passwords entered don't match!");
		return false;
	}
	return true;
}

function valueMod(f, n, v) {
	if("" == v) return v;
	var fn = f["m"].value;
	if(fn == "admin" && n == "old") {
		return btoa(fn + ":" + v);
	} else if((fn == "admin" || fn == "user") && n == "pwd") {
		return btoa(fn + ":" + v);
	}
	return v;
}

function genForm(name, label, pre, woOld, wRestart) {
	var t = "";
	var pwdId = name + "Pwd";
	var statId = name + "Stat";
	if(pre) {
		t = pre;
	}
	if(!woOld) {
		t += hFRow("Old password:", hInputP(null, 'old', ''));
	}
	t += hFRow("Password:", hInputP(null, 'pwd', ''), ' ');
	t += hFRow("Retype password:", hInputP(pwdId, null, ''));
	t += hTr(hTd(hButtonS("Submit" + (wRestart?", Restart":""), "m", name))
		+ hTd(hInputT(statId, null, '', 'readonly'), 'colspan="2"'));
	return hT(hT(label, 'h2') + '\n' + hT(t, 'table', 'class="cfg"'), 'form',
			hArg('name', name) + +hArg("autocomplete", "off") + hArg('action', 'cfg')
		+ hArg('onsubmit', "return postForm(this, '/cfg?m=" + name
			+ "', validateAp, '" + pwdId + "', '" + statId
			+ "', " + (wRestart?"staRefresh":"null")+ ", valueMod);")
		+ hArg('method', 'POST'));
}

function staRefresh(re, s) {
	if(s == 200) {
		setTimeout(function() {postForm(dc.forms["sta"], "/cfgSta", null, null, null, staHandler);}, 10000);
	}
}

function staHandler(re, s) {
	if(s != 200) {
		updateStatus(re, re);
		return;
	}
	var sel = ge("ssidList");
	var ed = ge("ssid");
	sel.disabled = false;
	ed.disabled = false;
	var stat = eval('(' + re + ')');
	html = hO("");
	aps = [];
	function Ap(n, d) {
		this.n = n; this.d = d.split(','); this.toString = function() {return this.n};
		this.d[0] = ["Open","WEP","WPA","WPA2","WPA+WPA2"][this.d[0]];
		this.info = function() {
			var d = this.d;
			return this.n + " (" + d[0] + ", " + d[1] + "dBm, " + d[2] + ", CH:" + d[3] + ")";
		}
	};
	var idx = 0;
	if(stat.aps) {
		for(var i in stat.aps) {
			idx = 1;
			aps.push(new Ap(i, stat.aps[i]));
		}
		aps.sort(function(a,b){return b.d[1] - a.d[1]});
	}
	aps.unshift("");
	for(var i = 1; i < aps.length; i++) {
		html += hO(aps[i].info());
	}

	sel.innerHTML = html;
	sel.selectedIndex = idx;
	ed.value = aps[idx].toString();
	var st = stat.stat;
	updateStatus(st.ls + " ip:" + st.ip + ", netmask:" + st.nm + ", gateway:" + st.gw,
		st.als + (st.aip ? " ip:" + st.aip + ", netmask:" + st.anm + ", gateway:" + st.agw : ""));
}

function onBodyLoad() {
	var apC = hFRow("Name:", hInputT(null, 'ssid', null))
		+ hFRow("Setup only:", hInput('checkbox', null, 'opt', '1', 'checked'), "Disable Access Point on successful connection to Wireless Network.");
	ge("forms").innerHTML =	genForm('ap', 'Setup Wi-Fi access point:', apC, true, true, staRefresh)
		+ genForm('admin', 'Change admin password:')
		+ genForm('user', 'Change user password:', null, true);
	ge("ssidList").focus();
	postForm(dc.forms["sta"], "/cfgSta", null, null, null, staHandler);
}
</script>
</head>
<body>
<form name="sta" autocomplete="off" action="cfg" method="POST" onsubmit="return postForm(this, '/cfg?m=sta', null, null, 'staStat', staRefresh);">
<h2>Connect to wireless network:</h2>
<table class="cfg">
	<tr><td><b>Name:</b></td>
		<td><input disabled type="text" id="ssid" name="ssid" onkeyup="comboEdit(this, 'ssidList')"/></td>
		<td><select disabled id="ssidList" onChange="combo(this, 'ssid')" onkeyup="combo(this, 'ssid')">
			<option>Loading...</option>
		</select></td>
	</tr><tr><td><b>Password:</b></td>
		<td><input type="text" name="pwd" value=""></td>
	</tr><tr><td><button type="submit" value="sta" name="m">Connect</button></td>
		<td colspan="2"><input type="text" id="staStat" readonly/></td>
	</tr>
</table>
</form>
<div id="forms"/>
<script language="javascript">
window.onload = function() {
	var j = document.createElement("script");
	j.src = "ju.js";
	j.onload = onBodyLoad;
	document.body.appendChild(j);
};
</script>
</body>
